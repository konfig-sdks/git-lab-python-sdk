# coding: utf-8

"""
    GitLab API

    An OpenAPI definition for the GitLab REST API. Few API resources or endpoints are currently included. The intent is to expand this to match the entire Markdown documentation of the API: <https://docs.gitlab.com/ee/api/>. Contributions are welcome.  When viewing this on gitlab.com, you can test API calls directly from the browser against the `gitlab.com` instance, if you are logged in. The feature uses the current [GitLab session cookie](https://docs.gitlab.com/ee/api/index.html#session-cookie), so each request is made using your account.  Instructions for using this tool can be found in [Interactive API Documentation](https://docs.gitlab.com/ee/api/openapi/openapi_interactive.html) 

    The version of the OpenAPI document: v4
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict


class ApplicationModifyAppearanceRequest(BaseModel):
    # Instance title on the sign in / sign up page
    title: typing.Optional[str] = Field(None, alias='title')

    # Markdown text shown on the sign in / sign up page
    description: typing.Optional[str] = Field(None, alias='description')

    # Name of the Progressive Web App
    pwa_name: typing.Optional[str] = Field(None, alias='pwa_name')

    # Optional, short name for Progressive Web App
    pwa_short_name: typing.Optional[str] = Field(None, alias='pwa_short_name')

    # An explanation of what the Progressive Web App does
    pwa_description: typing.Optional[str] = Field(None, alias='pwa_description')

    # Instance image used on the sign in / sign up page
    logo: typing.Optional[typing.IO] = Field(None, alias='logo')

    # Icon used for Progressive Web App
    pwa_icon: typing.Optional[typing.IO] = Field(None, alias='pwa_icon')

    # Instance image used for the main navigation bar
    header_logo: typing.Optional[typing.IO] = Field(None, alias='header_logo')

    # Instance favicon in .ico/.png format
    favicon: typing.Optional[typing.IO] = Field(None, alias='favicon')

    # Markdown text shown on the new project page
    new_project_guidelines: typing.Optional[str] = Field(None, alias='new_project_guidelines')

    # Markdown text shown on the profile page below Public Avatar
    profile_image_guidelines: typing.Optional[str] = Field(None, alias='profile_image_guidelines')

    # Message within the system header bar
    header_message: typing.Optional[str] = Field(None, alias='header_message')

    # Message within the system footer bar
    footer_message: typing.Optional[str] = Field(None, alias='footer_message')

    # Background color for the system header / footer bar
    message_background_color: typing.Optional[str] = Field(None, alias='message_background_color')

    # Font color for the system header / footer bar
    message_font_color: typing.Optional[str] = Field(None, alias='message_font_color')

    # Add header and footer to all outgoing emails if enabled
    email_header_and_footer_enabled: typing.Optional[bool] = Field(None, alias='email_header_and_footer_enabled')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
