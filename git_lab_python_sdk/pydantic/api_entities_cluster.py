# coding: utf-8

"""
    GitLab API

    An OpenAPI definition for the GitLab REST API. Few API resources or endpoints are currently included. The intent is to expand this to match the entire Markdown documentation of the API: <https://docs.gitlab.com/ee/api/>. Contributions are welcome.  When viewing this on gitlab.com, you can test API calls directly from the browser against the `gitlab.com` instance, if you are logged in. The feature uses the current [GitLab session cookie](https://docs.gitlab.com/ee/api/index.html#session-cookie), so each request is made using your account.  Instructions for using this tool can be found in [Interactive API Documentation](https://docs.gitlab.com/ee/api/openapi/openapi_interactive.html) 

    The version of the OpenAPI document: v4
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from git_lab_python_sdk.pydantic.api_entities_platform_kubernetes import APIEntitiesPlatformKubernetes
from git_lab_python_sdk.pydantic.api_entities_project_identity import APIEntitiesProjectIdentity
from git_lab_python_sdk.pydantic.api_entities_provider_gcp import APIEntitiesProviderGcp
from git_lab_python_sdk.pydantic.api_entities_user_basic import APIEntitiesUserBasic

class APIEntitiesCluster(BaseModel):
    id: typing.Optional[str] = Field(None, alias='id')

    name: typing.Optional[str] = Field(None, alias='name')

    created_at: typing.Optional[str] = Field(None, alias='created_at')

    domain: typing.Optional[str] = Field(None, alias='domain')

    enabled: typing.Optional[str] = Field(None, alias='enabled')

    managed: typing.Optional[str] = Field(None, alias='managed')

    provider_type: typing.Optional[str] = Field(None, alias='provider_type')

    platform_type: typing.Optional[str] = Field(None, alias='platform_type')

    environment_scope: typing.Optional[str] = Field(None, alias='environment_scope')

    cluster_type: typing.Optional[str] = Field(None, alias='cluster_type')

    namespace_per_environment: typing.Optional[str] = Field(None, alias='namespace_per_environment')

    user: typing.Optional[APIEntitiesUserBasic] = Field(None, alias='user')

    platform_kubernetes: typing.Optional[APIEntitiesPlatformKubernetes] = Field(None, alias='platform_kubernetes')

    provider_gcp: typing.Optional[APIEntitiesProviderGcp] = Field(None, alias='provider_gcp')

    management_project: typing.Optional[APIEntitiesProjectIdentity] = Field(None, alias='management_project')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
