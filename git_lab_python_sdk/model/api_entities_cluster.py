# coding: utf-8

"""
    GitLab API

    An OpenAPI definition for the GitLab REST API. Few API resources or endpoints are currently included. The intent is to expand this to match the entire Markdown documentation of the API: <https://docs.gitlab.com/ee/api/>. Contributions are welcome.  When viewing this on gitlab.com, you can test API calls directly from the browser against the `gitlab.com` instance, if you are logged in. The feature uses the current [GitLab session cookie](https://docs.gitlab.com/ee/api/index.html#session-cookie), so each request is made using your account.  Instructions for using this tool can be found in [Interactive API Documentation](https://docs.gitlab.com/ee/api/openapi/openapi_interactive.html) 

    The version of the OpenAPI document: v4
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from git_lab_python_sdk import schemas  # noqa: F401


class APIEntitiesCluster(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    API_Entities_Cluster model
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
            name = schemas.StrSchema
            created_at = schemas.StrSchema
            domain = schemas.StrSchema
            enabled = schemas.StrSchema
            managed = schemas.StrSchema
            provider_type = schemas.StrSchema
            platform_type = schemas.StrSchema
            environment_scope = schemas.StrSchema
            cluster_type = schemas.StrSchema
            namespace_per_environment = schemas.StrSchema
        
            @staticmethod
            def user() -> typing.Type['APIEntitiesUserBasic']:
                return APIEntitiesUserBasic
        
            @staticmethod
            def platform_kubernetes() -> typing.Type['APIEntitiesPlatformKubernetes']:
                return APIEntitiesPlatformKubernetes
        
            @staticmethod
            def provider_gcp() -> typing.Type['APIEntitiesProviderGcp']:
                return APIEntitiesProviderGcp
        
            @staticmethod
            def management_project() -> typing.Type['APIEntitiesProjectIdentity']:
                return APIEntitiesProjectIdentity
            __annotations__ = {
                "id": id,
                "name": name,
                "created_at": created_at,
                "domain": domain,
                "enabled": enabled,
                "managed": managed,
                "provider_type": provider_type,
                "platform_type": platform_type,
                "environment_scope": environment_scope,
                "cluster_type": cluster_type,
                "namespace_per_environment": namespace_per_environment,
                "user": user,
                "platform_kubernetes": platform_kubernetes,
                "provider_gcp": provider_gcp,
                "management_project": management_project,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["domain"]) -> MetaOapg.properties.domain: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enabled"]) -> MetaOapg.properties.enabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["managed"]) -> MetaOapg.properties.managed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["provider_type"]) -> MetaOapg.properties.provider_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["platform_type"]) -> MetaOapg.properties.platform_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["environment_scope"]) -> MetaOapg.properties.environment_scope: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cluster_type"]) -> MetaOapg.properties.cluster_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["namespace_per_environment"]) -> MetaOapg.properties.namespace_per_environment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> 'APIEntitiesUserBasic': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["platform_kubernetes"]) -> 'APIEntitiesPlatformKubernetes': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["provider_gcp"]) -> 'APIEntitiesProviderGcp': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["management_project"]) -> 'APIEntitiesProjectIdentity': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "created_at", "domain", "enabled", "managed", "provider_type", "platform_type", "environment_scope", "cluster_type", "namespace_per_environment", "user", "platform_kubernetes", "provider_gcp", "management_project", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["domain"]) -> typing.Union[MetaOapg.properties.domain, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enabled"]) -> typing.Union[MetaOapg.properties.enabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["managed"]) -> typing.Union[MetaOapg.properties.managed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["provider_type"]) -> typing.Union[MetaOapg.properties.provider_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["platform_type"]) -> typing.Union[MetaOapg.properties.platform_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["environment_scope"]) -> typing.Union[MetaOapg.properties.environment_scope, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cluster_type"]) -> typing.Union[MetaOapg.properties.cluster_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["namespace_per_environment"]) -> typing.Union[MetaOapg.properties.namespace_per_environment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> typing.Union['APIEntitiesUserBasic', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["platform_kubernetes"]) -> typing.Union['APIEntitiesPlatformKubernetes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["provider_gcp"]) -> typing.Union['APIEntitiesProviderGcp', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["management_project"]) -> typing.Union['APIEntitiesProjectIdentity', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "created_at", "domain", "enabled", "managed", "provider_type", "platform_type", "environment_scope", "cluster_type", "namespace_per_environment", "user", "platform_kubernetes", "provider_gcp", "management_project", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        created_at: typing.Union[MetaOapg.properties.created_at, str, schemas.Unset] = schemas.unset,
        domain: typing.Union[MetaOapg.properties.domain, str, schemas.Unset] = schemas.unset,
        enabled: typing.Union[MetaOapg.properties.enabled, str, schemas.Unset] = schemas.unset,
        managed: typing.Union[MetaOapg.properties.managed, str, schemas.Unset] = schemas.unset,
        provider_type: typing.Union[MetaOapg.properties.provider_type, str, schemas.Unset] = schemas.unset,
        platform_type: typing.Union[MetaOapg.properties.platform_type, str, schemas.Unset] = schemas.unset,
        environment_scope: typing.Union[MetaOapg.properties.environment_scope, str, schemas.Unset] = schemas.unset,
        cluster_type: typing.Union[MetaOapg.properties.cluster_type, str, schemas.Unset] = schemas.unset,
        namespace_per_environment: typing.Union[MetaOapg.properties.namespace_per_environment, str, schemas.Unset] = schemas.unset,
        user: typing.Union['APIEntitiesUserBasic', schemas.Unset] = schemas.unset,
        platform_kubernetes: typing.Union['APIEntitiesPlatformKubernetes', schemas.Unset] = schemas.unset,
        provider_gcp: typing.Union['APIEntitiesProviderGcp', schemas.Unset] = schemas.unset,
        management_project: typing.Union['APIEntitiesProjectIdentity', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'APIEntitiesCluster':
        return super().__new__(
            cls,
            *args,
            id=id,
            name=name,
            created_at=created_at,
            domain=domain,
            enabled=enabled,
            managed=managed,
            provider_type=provider_type,
            platform_type=platform_type,
            environment_scope=environment_scope,
            cluster_type=cluster_type,
            namespace_per_environment=namespace_per_environment,
            user=user,
            platform_kubernetes=platform_kubernetes,
            provider_gcp=provider_gcp,
            management_project=management_project,
            _configuration=_configuration,
            **kwargs,
        )

from git_lab_python_sdk.model.api_entities_platform_kubernetes import APIEntitiesPlatformKubernetes
from git_lab_python_sdk.model.api_entities_project_identity import APIEntitiesProjectIdentity
from git_lab_python_sdk.model.api_entities_provider_gcp import APIEntitiesProviderGcp
from git_lab_python_sdk.model.api_entities_user_basic import APIEntitiesUserBasic
