# coding: utf-8

"""
    GitLab API

    An OpenAPI definition for the GitLab REST API. Few API resources or endpoints are currently included. The intent is to expand this to match the entire Markdown documentation of the API: <https://docs.gitlab.com/ee/api/>. Contributions are welcome.  When viewing this on gitlab.com, you can test API calls directly from the browser against the `gitlab.com` instance, if you are logged in. The feature uses the current [GitLab session cookie](https://docs.gitlab.com/ee/api/index.html#session-cookie), so each request is made using your account.  Instructions for using this tool can be found in [Interactive API Documentation](https://docs.gitlab.com/ee/api/openapi/openapi_interactive.html) 

    The version of the OpenAPI document: v4
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from git_lab_python_sdk import schemas  # noqa: F401


class PlanlimitsModifyLimitsRequest(
    schemas.AnyTypeSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "plan_name",
        }
        
        class properties:
            
            
            class plan_name(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def DEFAULT(cls):
                    return cls("default")
                
                @schemas.classproperty
                def FREE(cls):
                    return cls("free")
                
                @schemas.classproperty
                def BRONZE(cls):
                    return cls("bronze")
                
                @schemas.classproperty
                def SILVER(cls):
                    return cls("silver")
                
                @schemas.classproperty
                def PREMIUM(cls):
                    return cls("premium")
                
                @schemas.classproperty
                def GOLD(cls):
                    return cls("gold")
                
                @schemas.classproperty
                def ULTIMATE(cls):
                    return cls("ultimate")
                
                @schemas.classproperty
                def ULTIMATE_TRIAL(cls):
                    return cls("ultimate_trial")
                
                @schemas.classproperty
                def PREMIUM_TRIAL(cls):
                    return cls("premium_trial")
                
                @schemas.classproperty
                def OPENSOURCE(cls):
                    return cls("opensource")
            ci_pipeline_size = schemas.Int32Schema
            ci_active_jobs = schemas.Int32Schema
            ci_project_subscriptions = schemas.Int32Schema
            ci_pipeline_schedules = schemas.Int32Schema
            ci_needs_size_limit = schemas.Int32Schema
            ci_registered_group_runners = schemas.Int32Schema
            ci_registered_project_runners = schemas.Int32Schema
            conan_max_file_size = schemas.Int32Schema
            enforcement_limit = schemas.Int32Schema
            generic_packages_max_file_size = schemas.Int32Schema
            helm_max_file_size = schemas.Int32Schema
            maven_max_file_size = schemas.Int32Schema
            notification_limit = schemas.Int32Schema
            npm_max_file_size = schemas.Int32Schema
            nuget_max_file_size = schemas.Int32Schema
            pypi_max_file_size = schemas.Int32Schema
            terraform_module_max_file_size = schemas.Int32Schema
            storage_size_limit = schemas.Int32Schema
            pipeline_hierarchy_size = schemas.Int32Schema
            __annotations__ = {
                "plan_name": plan_name,
                "ci_pipeline_size": ci_pipeline_size,
                "ci_active_jobs": ci_active_jobs,
                "ci_project_subscriptions": ci_project_subscriptions,
                "ci_pipeline_schedules": ci_pipeline_schedules,
                "ci_needs_size_limit": ci_needs_size_limit,
                "ci_registered_group_runners": ci_registered_group_runners,
                "ci_registered_project_runners": ci_registered_project_runners,
                "conan_max_file_size": conan_max_file_size,
                "enforcement_limit": enforcement_limit,
                "generic_packages_max_file_size": generic_packages_max_file_size,
                "helm_max_file_size": helm_max_file_size,
                "maven_max_file_size": maven_max_file_size,
                "notification_limit": notification_limit,
                "npm_max_file_size": npm_max_file_size,
                "nuget_max_file_size": nuget_max_file_size,
                "pypi_max_file_size": pypi_max_file_size,
                "terraform_module_max_file_size": terraform_module_max_file_size,
                "storage_size_limit": storage_size_limit,
                "pipeline_hierarchy_size": pipeline_hierarchy_size,
            }

    
    plan_name: MetaOapg.properties.plan_name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["plan_name"]) -> MetaOapg.properties.plan_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ci_pipeline_size"]) -> MetaOapg.properties.ci_pipeline_size: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ci_active_jobs"]) -> MetaOapg.properties.ci_active_jobs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ci_project_subscriptions"]) -> MetaOapg.properties.ci_project_subscriptions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ci_pipeline_schedules"]) -> MetaOapg.properties.ci_pipeline_schedules: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ci_needs_size_limit"]) -> MetaOapg.properties.ci_needs_size_limit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ci_registered_group_runners"]) -> MetaOapg.properties.ci_registered_group_runners: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ci_registered_project_runners"]) -> MetaOapg.properties.ci_registered_project_runners: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["conan_max_file_size"]) -> MetaOapg.properties.conan_max_file_size: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enforcement_limit"]) -> MetaOapg.properties.enforcement_limit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["generic_packages_max_file_size"]) -> MetaOapg.properties.generic_packages_max_file_size: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["helm_max_file_size"]) -> MetaOapg.properties.helm_max_file_size: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maven_max_file_size"]) -> MetaOapg.properties.maven_max_file_size: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notification_limit"]) -> MetaOapg.properties.notification_limit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["npm_max_file_size"]) -> MetaOapg.properties.npm_max_file_size: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nuget_max_file_size"]) -> MetaOapg.properties.nuget_max_file_size: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pypi_max_file_size"]) -> MetaOapg.properties.pypi_max_file_size: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["terraform_module_max_file_size"]) -> MetaOapg.properties.terraform_module_max_file_size: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["storage_size_limit"]) -> MetaOapg.properties.storage_size_limit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pipeline_hierarchy_size"]) -> MetaOapg.properties.pipeline_hierarchy_size: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["plan_name", "ci_pipeline_size", "ci_active_jobs", "ci_project_subscriptions", "ci_pipeline_schedules", "ci_needs_size_limit", "ci_registered_group_runners", "ci_registered_project_runners", "conan_max_file_size", "enforcement_limit", "generic_packages_max_file_size", "helm_max_file_size", "maven_max_file_size", "notification_limit", "npm_max_file_size", "nuget_max_file_size", "pypi_max_file_size", "terraform_module_max_file_size", "storage_size_limit", "pipeline_hierarchy_size", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["plan_name"]) -> MetaOapg.properties.plan_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ci_pipeline_size"]) -> typing.Union[MetaOapg.properties.ci_pipeline_size, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ci_active_jobs"]) -> typing.Union[MetaOapg.properties.ci_active_jobs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ci_project_subscriptions"]) -> typing.Union[MetaOapg.properties.ci_project_subscriptions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ci_pipeline_schedules"]) -> typing.Union[MetaOapg.properties.ci_pipeline_schedules, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ci_needs_size_limit"]) -> typing.Union[MetaOapg.properties.ci_needs_size_limit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ci_registered_group_runners"]) -> typing.Union[MetaOapg.properties.ci_registered_group_runners, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ci_registered_project_runners"]) -> typing.Union[MetaOapg.properties.ci_registered_project_runners, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["conan_max_file_size"]) -> typing.Union[MetaOapg.properties.conan_max_file_size, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enforcement_limit"]) -> typing.Union[MetaOapg.properties.enforcement_limit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["generic_packages_max_file_size"]) -> typing.Union[MetaOapg.properties.generic_packages_max_file_size, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["helm_max_file_size"]) -> typing.Union[MetaOapg.properties.helm_max_file_size, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maven_max_file_size"]) -> typing.Union[MetaOapg.properties.maven_max_file_size, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notification_limit"]) -> typing.Union[MetaOapg.properties.notification_limit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["npm_max_file_size"]) -> typing.Union[MetaOapg.properties.npm_max_file_size, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nuget_max_file_size"]) -> typing.Union[MetaOapg.properties.nuget_max_file_size, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pypi_max_file_size"]) -> typing.Union[MetaOapg.properties.pypi_max_file_size, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["terraform_module_max_file_size"]) -> typing.Union[MetaOapg.properties.terraform_module_max_file_size, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["storage_size_limit"]) -> typing.Union[MetaOapg.properties.storage_size_limit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pipeline_hierarchy_size"]) -> typing.Union[MetaOapg.properties.pipeline_hierarchy_size, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["plan_name", "ci_pipeline_size", "ci_active_jobs", "ci_project_subscriptions", "ci_pipeline_schedules", "ci_needs_size_limit", "ci_registered_group_runners", "ci_registered_project_runners", "conan_max_file_size", "enforcement_limit", "generic_packages_max_file_size", "helm_max_file_size", "maven_max_file_size", "notification_limit", "npm_max_file_size", "nuget_max_file_size", "pypi_max_file_size", "terraform_module_max_file_size", "storage_size_limit", "pipeline_hierarchy_size", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        plan_name: typing.Union[MetaOapg.properties.plan_name, str, ],
        ci_pipeline_size: typing.Union[MetaOapg.properties.ci_pipeline_size, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ci_active_jobs: typing.Union[MetaOapg.properties.ci_active_jobs, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ci_project_subscriptions: typing.Union[MetaOapg.properties.ci_project_subscriptions, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ci_pipeline_schedules: typing.Union[MetaOapg.properties.ci_pipeline_schedules, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ci_needs_size_limit: typing.Union[MetaOapg.properties.ci_needs_size_limit, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ci_registered_group_runners: typing.Union[MetaOapg.properties.ci_registered_group_runners, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ci_registered_project_runners: typing.Union[MetaOapg.properties.ci_registered_project_runners, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        conan_max_file_size: typing.Union[MetaOapg.properties.conan_max_file_size, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        enforcement_limit: typing.Union[MetaOapg.properties.enforcement_limit, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        generic_packages_max_file_size: typing.Union[MetaOapg.properties.generic_packages_max_file_size, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        helm_max_file_size: typing.Union[MetaOapg.properties.helm_max_file_size, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        maven_max_file_size: typing.Union[MetaOapg.properties.maven_max_file_size, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        notification_limit: typing.Union[MetaOapg.properties.notification_limit, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        npm_max_file_size: typing.Union[MetaOapg.properties.npm_max_file_size, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        nuget_max_file_size: typing.Union[MetaOapg.properties.nuget_max_file_size, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        pypi_max_file_size: typing.Union[MetaOapg.properties.pypi_max_file_size, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        terraform_module_max_file_size: typing.Union[MetaOapg.properties.terraform_module_max_file_size, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        storage_size_limit: typing.Union[MetaOapg.properties.storage_size_limit, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        pipeline_hierarchy_size: typing.Union[MetaOapg.properties.pipeline_hierarchy_size, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PlanlimitsModifyLimitsRequest':
        return super().__new__(
            cls,
            *args,
            plan_name=plan_name,
            ci_pipeline_size=ci_pipeline_size,
            ci_active_jobs=ci_active_jobs,
            ci_project_subscriptions=ci_project_subscriptions,
            ci_pipeline_schedules=ci_pipeline_schedules,
            ci_needs_size_limit=ci_needs_size_limit,
            ci_registered_group_runners=ci_registered_group_runners,
            ci_registered_project_runners=ci_registered_project_runners,
            conan_max_file_size=conan_max_file_size,
            enforcement_limit=enforcement_limit,
            generic_packages_max_file_size=generic_packages_max_file_size,
            helm_max_file_size=helm_max_file_size,
            maven_max_file_size=maven_max_file_size,
            notification_limit=notification_limit,
            npm_max_file_size=npm_max_file_size,
            nuget_max_file_size=nuget_max_file_size,
            pypi_max_file_size=pypi_max_file_size,
            terraform_module_max_file_size=terraform_module_max_file_size,
            storage_size_limit=storage_size_limit,
            pipeline_hierarchy_size=pipeline_hierarchy_size,
            _configuration=_configuration,
            **kwargs,
        )
