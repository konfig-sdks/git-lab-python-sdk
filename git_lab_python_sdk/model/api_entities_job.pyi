# coding: utf-8

"""
    GitLab API

    An OpenAPI definition for the GitLab REST API. Few API resources or endpoints are currently included. The intent is to expand this to match the entire Markdown documentation of the API: <https://docs.gitlab.com/ee/api/>. Contributions are welcome.  When viewing this on gitlab.com, you can test API calls directly from the browser against the `gitlab.com` instance, if you are logged in. The feature uses the current [GitLab session cookie](https://docs.gitlab.com/ee/api/index.html#session-cookie), so each request is made using your account.  Instructions for using this tool can be found in [Interactive API Documentation](https://docs.gitlab.com/ee/api/openapi/openapi_interactive.html) 

    The version of the OpenAPI document: v4
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from git_lab_python_sdk import schemas  # noqa: F401


class APIEntitiesJob(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    API_Entities_Job model
    """


    class MetaOapg:
        
        class properties:
            id = schemas.IntSchema
            name = schemas.StrSchema
            status = schemas.StrSchema
            stage = schemas.StrSchema
            created_at = schemas.DateTimeSchema
            started_at = schemas.DateTimeSchema
            finished_at = schemas.DateTimeSchema
        
            @staticmethod
            def commit() -> typing.Type['APIEntitiesCommit']:
                return APIEntitiesCommit
            archived = schemas.BoolSchema
            allow_failure = schemas.BoolSchema
            erased_at = schemas.DateTimeSchema
            duration = schemas.IntSchema
            queued_duration = schemas.NumberSchema
            ref = schemas.StrSchema
        
            @staticmethod
            def artifacts() -> typing.Type['APIEntitiesJobArtifacts']:
                return APIEntitiesJobArtifacts
            tag = schemas.BoolSchema
            web_url = schemas.StrSchema
        
            @staticmethod
            def project() -> typing.Type['APIEntitiesJobProject']:
                return APIEntitiesJobProject
        
            @staticmethod
            def user() -> typing.Type['APIEntitiesUserBasic']:
                return APIEntitiesUserBasic
            __annotations__ = {
                "id": id,
                "name": name,
                "status": status,
                "stage": stage,
                "created_at": created_at,
                "started_at": started_at,
                "finished_at": finished_at,
                "commit": commit,
                "archived": archived,
                "allow_failure": allow_failure,
                "erased_at": erased_at,
                "duration": duration,
                "queued_duration": queued_duration,
                "ref": ref,
                "artifacts": artifacts,
                "tag": tag,
                "web_url": web_url,
                "project": project,
                "user": user,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stage"]) -> MetaOapg.properties.stage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["started_at"]) -> MetaOapg.properties.started_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["finished_at"]) -> MetaOapg.properties.finished_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["commit"]) -> 'APIEntitiesCommit': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["archived"]) -> MetaOapg.properties.archived: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allow_failure"]) -> MetaOapg.properties.allow_failure: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["erased_at"]) -> MetaOapg.properties.erased_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["duration"]) -> MetaOapg.properties.duration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["queued_duration"]) -> MetaOapg.properties.queued_duration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ref"]) -> MetaOapg.properties.ref: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["artifacts"]) -> 'APIEntitiesJobArtifacts': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tag"]) -> MetaOapg.properties.tag: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["web_url"]) -> MetaOapg.properties.web_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["project"]) -> 'APIEntitiesJobProject': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> 'APIEntitiesUserBasic': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "status", "stage", "created_at", "started_at", "finished_at", "commit", "archived", "allow_failure", "erased_at", "duration", "queued_duration", "ref", "artifacts", "tag", "web_url", "project", "user", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stage"]) -> typing.Union[MetaOapg.properties.stage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["started_at"]) -> typing.Union[MetaOapg.properties.started_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["finished_at"]) -> typing.Union[MetaOapg.properties.finished_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["commit"]) -> typing.Union['APIEntitiesCommit', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["archived"]) -> typing.Union[MetaOapg.properties.archived, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allow_failure"]) -> typing.Union[MetaOapg.properties.allow_failure, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["erased_at"]) -> typing.Union[MetaOapg.properties.erased_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["duration"]) -> typing.Union[MetaOapg.properties.duration, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["queued_duration"]) -> typing.Union[MetaOapg.properties.queued_duration, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ref"]) -> typing.Union[MetaOapg.properties.ref, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["artifacts"]) -> typing.Union['APIEntitiesJobArtifacts', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tag"]) -> typing.Union[MetaOapg.properties.tag, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["web_url"]) -> typing.Union[MetaOapg.properties.web_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["project"]) -> typing.Union['APIEntitiesJobProject', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> typing.Union['APIEntitiesUserBasic', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "status", "stage", "created_at", "started_at", "finished_at", "commit", "archived", "allow_failure", "erased_at", "duration", "queued_duration", "ref", "artifacts", "tag", "web_url", "project", "user", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        stage: typing.Union[MetaOapg.properties.stage, str, schemas.Unset] = schemas.unset,
        created_at: typing.Union[MetaOapg.properties.created_at, str, datetime, schemas.Unset] = schemas.unset,
        started_at: typing.Union[MetaOapg.properties.started_at, str, datetime, schemas.Unset] = schemas.unset,
        finished_at: typing.Union[MetaOapg.properties.finished_at, str, datetime, schemas.Unset] = schemas.unset,
        commit: typing.Union['APIEntitiesCommit', schemas.Unset] = schemas.unset,
        archived: typing.Union[MetaOapg.properties.archived, bool, schemas.Unset] = schemas.unset,
        allow_failure: typing.Union[MetaOapg.properties.allow_failure, bool, schemas.Unset] = schemas.unset,
        erased_at: typing.Union[MetaOapg.properties.erased_at, str, datetime, schemas.Unset] = schemas.unset,
        duration: typing.Union[MetaOapg.properties.duration, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        queued_duration: typing.Union[MetaOapg.properties.queued_duration, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        ref: typing.Union[MetaOapg.properties.ref, str, schemas.Unset] = schemas.unset,
        artifacts: typing.Union['APIEntitiesJobArtifacts', schemas.Unset] = schemas.unset,
        tag: typing.Union[MetaOapg.properties.tag, bool, schemas.Unset] = schemas.unset,
        web_url: typing.Union[MetaOapg.properties.web_url, str, schemas.Unset] = schemas.unset,
        project: typing.Union['APIEntitiesJobProject', schemas.Unset] = schemas.unset,
        user: typing.Union['APIEntitiesUserBasic', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'APIEntitiesJob':
        return super().__new__(
            cls,
            *args,
            id=id,
            name=name,
            status=status,
            stage=stage,
            created_at=created_at,
            started_at=started_at,
            finished_at=finished_at,
            commit=commit,
            archived=archived,
            allow_failure=allow_failure,
            erased_at=erased_at,
            duration=duration,
            queued_duration=queued_duration,
            ref=ref,
            artifacts=artifacts,
            tag=tag,
            web_url=web_url,
            project=project,
            user=user,
            _configuration=_configuration,
            **kwargs,
        )

from git_lab_python_sdk.model.api_entities_commit import APIEntitiesCommit
from git_lab_python_sdk.model.api_entities_job_artifacts import APIEntitiesJobArtifacts
from git_lab_python_sdk.model.api_entities_job_project import APIEntitiesJobProject
from git_lab_python_sdk.model.api_entities_user_basic import APIEntitiesUserBasic
