# coding: utf-8

"""
    GitLab API

    An OpenAPI definition for the GitLab REST API. Few API resources or endpoints are currently included. The intent is to expand this to match the entire Markdown documentation of the API: <https://docs.gitlab.com/ee/api/>. Contributions are welcome.  When viewing this on gitlab.com, you can test API calls directly from the browser against the `gitlab.com` instance, if you are logged in. The feature uses the current [GitLab session cookie](https://docs.gitlab.com/ee/api/index.html#session-cookie), so each request is made using your account.  Instructions for using this tool can be found in [Interactive API Documentation](https://docs.gitlab.com/ee/api/openapi/openapi_interactive.html) 

    The version of the OpenAPI document: v4
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from git_lab_python_sdk import schemas  # noqa: F401


class APIEntitiesPlatformKubernetes(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            api_url = schemas.StrSchema
            namespace = schemas.StrSchema
            authorization_type = schemas.StrSchema
            ca_cert = schemas.StrSchema
            __annotations__ = {
                "api_url": api_url,
                "namespace": namespace,
                "authorization_type": authorization_type,
                "ca_cert": ca_cert,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["api_url"]) -> MetaOapg.properties.api_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["namespace"]) -> MetaOapg.properties.namespace: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authorization_type"]) -> MetaOapg.properties.authorization_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ca_cert"]) -> MetaOapg.properties.ca_cert: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["api_url", "namespace", "authorization_type", "ca_cert", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["api_url"]) -> typing.Union[MetaOapg.properties.api_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["namespace"]) -> typing.Union[MetaOapg.properties.namespace, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authorization_type"]) -> typing.Union[MetaOapg.properties.authorization_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ca_cert"]) -> typing.Union[MetaOapg.properties.ca_cert, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["api_url", "namespace", "authorization_type", "ca_cert", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        api_url: typing.Union[MetaOapg.properties.api_url, str, schemas.Unset] = schemas.unset,
        namespace: typing.Union[MetaOapg.properties.namespace, str, schemas.Unset] = schemas.unset,
        authorization_type: typing.Union[MetaOapg.properties.authorization_type, str, schemas.Unset] = schemas.unset,
        ca_cert: typing.Union[MetaOapg.properties.ca_cert, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'APIEntitiesPlatformKubernetes':
        return super().__new__(
            cls,
            *args,
            api_url=api_url,
            namespace=namespace,
            authorization_type=authorization_type,
            ca_cert=ca_cert,
            _configuration=_configuration,
            **kwargs,
        )
