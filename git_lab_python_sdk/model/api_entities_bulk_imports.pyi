# coding: utf-8

"""
    GitLab API

    An OpenAPI definition for the GitLab REST API. Few API resources or endpoints are currently included. The intent is to expand this to match the entire Markdown documentation of the API: <https://docs.gitlab.com/ee/api/>. Contributions are welcome.  When viewing this on gitlab.com, you can test API calls directly from the browser against the `gitlab.com` instance, if you are logged in. The feature uses the current [GitLab session cookie](https://docs.gitlab.com/ee/api/index.html#session-cookie), so each request is made using your account.  Instructions for using this tool can be found in [Interactive API Documentation](https://docs.gitlab.com/ee/api/openapi/openapi_interactive.html) 

    The version of the OpenAPI document: v4
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from git_lab_python_sdk import schemas  # noqa: F401


class APIEntitiesBulkImports(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    API_Entities_BulkImports model
    """


    class MetaOapg:
        
        class properties:
            id = schemas.Int32Schema
            bulk_import_id = schemas.Int32Schema
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def CREATED(cls):
                    return cls("created")
                
                @schemas.classproperty
                def STARTED(cls):
                    return cls("started")
                
                @schemas.classproperty
                def FINISHED(cls):
                    return cls("finished")
                
                @schemas.classproperty
                def TIMEOUT(cls):
                    return cls("timeout")
                
                @schemas.classproperty
                def FAILED(cls):
                    return cls("failed")
            
            
            class entity_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def GROUP(cls):
                    return cls("group")
                
                @schemas.classproperty
                def PROJECT(cls):
                    return cls("project")
            source_full_path = schemas.StrSchema
            destination_full_path = schemas.StrSchema
            destination_name = schemas.StrSchema
            destination_slug = schemas.StrSchema
            destination_namespace = schemas.StrSchema
            parent_id = schemas.Int32Schema
            namespace_id = schemas.Int32Schema
            project_id = schemas.Int32Schema
            created_at = schemas.DateTimeSchema
            updated_at = schemas.DateTimeSchema
            
            
            class failures(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['APIEntitiesBulkImportsEntityFailure']:
                        return APIEntitiesBulkImportsEntityFailure
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['APIEntitiesBulkImportsEntityFailure'], typing.List['APIEntitiesBulkImportsEntityFailure']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'failures':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'APIEntitiesBulkImportsEntityFailure':
                    return super().__getitem__(i)
            migrate_projects = schemas.BoolSchema
            __annotations__ = {
                "id": id,
                "bulk_import_id": bulk_import_id,
                "status": status,
                "entity_type": entity_type,
                "source_full_path": source_full_path,
                "destination_full_path": destination_full_path,
                "destination_name": destination_name,
                "destination_slug": destination_slug,
                "destination_namespace": destination_namespace,
                "parent_id": parent_id,
                "namespace_id": namespace_id,
                "project_id": project_id,
                "created_at": created_at,
                "updated_at": updated_at,
                "failures": failures,
                "migrate_projects": migrate_projects,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bulk_import_id"]) -> MetaOapg.properties.bulk_import_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entity_type"]) -> MetaOapg.properties.entity_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source_full_path"]) -> MetaOapg.properties.source_full_path: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["destination_full_path"]) -> MetaOapg.properties.destination_full_path: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["destination_name"]) -> MetaOapg.properties.destination_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["destination_slug"]) -> MetaOapg.properties.destination_slug: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["destination_namespace"]) -> MetaOapg.properties.destination_namespace: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parent_id"]) -> MetaOapg.properties.parent_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["namespace_id"]) -> MetaOapg.properties.namespace_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["project_id"]) -> MetaOapg.properties.project_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["failures"]) -> MetaOapg.properties.failures: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["migrate_projects"]) -> MetaOapg.properties.migrate_projects: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "bulk_import_id", "status", "entity_type", "source_full_path", "destination_full_path", "destination_name", "destination_slug", "destination_namespace", "parent_id", "namespace_id", "project_id", "created_at", "updated_at", "failures", "migrate_projects", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bulk_import_id"]) -> typing.Union[MetaOapg.properties.bulk_import_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entity_type"]) -> typing.Union[MetaOapg.properties.entity_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source_full_path"]) -> typing.Union[MetaOapg.properties.source_full_path, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["destination_full_path"]) -> typing.Union[MetaOapg.properties.destination_full_path, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["destination_name"]) -> typing.Union[MetaOapg.properties.destination_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["destination_slug"]) -> typing.Union[MetaOapg.properties.destination_slug, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["destination_namespace"]) -> typing.Union[MetaOapg.properties.destination_namespace, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parent_id"]) -> typing.Union[MetaOapg.properties.parent_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["namespace_id"]) -> typing.Union[MetaOapg.properties.namespace_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["project_id"]) -> typing.Union[MetaOapg.properties.project_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_at"]) -> typing.Union[MetaOapg.properties.updated_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["failures"]) -> typing.Union[MetaOapg.properties.failures, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["migrate_projects"]) -> typing.Union[MetaOapg.properties.migrate_projects, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "bulk_import_id", "status", "entity_type", "source_full_path", "destination_full_path", "destination_name", "destination_slug", "destination_namespace", "parent_id", "namespace_id", "project_id", "created_at", "updated_at", "failures", "migrate_projects", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        bulk_import_id: typing.Union[MetaOapg.properties.bulk_import_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        entity_type: typing.Union[MetaOapg.properties.entity_type, str, schemas.Unset] = schemas.unset,
        source_full_path: typing.Union[MetaOapg.properties.source_full_path, str, schemas.Unset] = schemas.unset,
        destination_full_path: typing.Union[MetaOapg.properties.destination_full_path, str, schemas.Unset] = schemas.unset,
        destination_name: typing.Union[MetaOapg.properties.destination_name, str, schemas.Unset] = schemas.unset,
        destination_slug: typing.Union[MetaOapg.properties.destination_slug, str, schemas.Unset] = schemas.unset,
        destination_namespace: typing.Union[MetaOapg.properties.destination_namespace, str, schemas.Unset] = schemas.unset,
        parent_id: typing.Union[MetaOapg.properties.parent_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        namespace_id: typing.Union[MetaOapg.properties.namespace_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        project_id: typing.Union[MetaOapg.properties.project_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        created_at: typing.Union[MetaOapg.properties.created_at, str, datetime, schemas.Unset] = schemas.unset,
        updated_at: typing.Union[MetaOapg.properties.updated_at, str, datetime, schemas.Unset] = schemas.unset,
        failures: typing.Union[MetaOapg.properties.failures, list, tuple, schemas.Unset] = schemas.unset,
        migrate_projects: typing.Union[MetaOapg.properties.migrate_projects, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'APIEntitiesBulkImports':
        return super().__new__(
            cls,
            *args,
            id=id,
            bulk_import_id=bulk_import_id,
            status=status,
            entity_type=entity_type,
            source_full_path=source_full_path,
            destination_full_path=destination_full_path,
            destination_name=destination_name,
            destination_slug=destination_slug,
            destination_namespace=destination_namespace,
            parent_id=parent_id,
            namespace_id=namespace_id,
            project_id=project_id,
            created_at=created_at,
            updated_at=updated_at,
            failures=failures,
            migrate_projects=migrate_projects,
            _configuration=_configuration,
            **kwargs,
        )

from git_lab_python_sdk.model.api_entities_bulk_imports_entity_failure import APIEntitiesBulkImportsEntityFailure
