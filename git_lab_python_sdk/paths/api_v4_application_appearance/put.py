# coding: utf-8

"""
    GitLab API

    An OpenAPI definition for the GitLab REST API. Few API resources or endpoints are currently included. The intent is to expand this to match the entire Markdown documentation of the API: <https://docs.gitlab.com/ee/api/>. Contributions are welcome.  When viewing this on gitlab.com, you can test API calls directly from the browser against the `gitlab.com` instance, if you are logged in. The feature uses the current [GitLab session cookie](https://docs.gitlab.com/ee/api/index.html#session-cookie), so each request is made using your account.  Instructions for using this tool can be found in [Interactive API Documentation](https://docs.gitlab.com/ee/api/openapi/openapi_interactive.html) 

    The version of the OpenAPI document: v4
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from git_lab_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from git_lab_python_sdk.api_response import AsyncGeneratorResponse
from git_lab_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from git_lab_python_sdk import schemas  # noqa: F401

from git_lab_python_sdk.model.api_entities_appearance import APIEntitiesAppearance as APIEntitiesAppearanceSchema
from git_lab_python_sdk.model.application_modify_appearance_request import ApplicationModifyAppearanceRequest as ApplicationModifyAppearanceRequestSchema

from git_lab_python_sdk.type.api_entities_appearance import APIEntitiesAppearance
from git_lab_python_sdk.type.application_modify_appearance_request import ApplicationModifyAppearanceRequest

from ...api_client import Dictionary
from git_lab_python_sdk.pydantic.api_entities_appearance import APIEntitiesAppearance as APIEntitiesAppearancePydantic
from git_lab_python_sdk.pydantic.application_modify_appearance_request import ApplicationModifyAppearanceRequest as ApplicationModifyAppearanceRequestPydantic

from . import path

# body param
SchemaForRequestBodyMultipartFormData = ApplicationModifyAppearanceRequestSchema


request_body_application_modify_appearance_request = api_client.RequestBody(
    content={
        'multipart/form-data': api_client.MediaType(
            schema=SchemaForRequestBodyMultipartFormData),
    },
)
_auth = [
    'ApiKeyAuth',
]
SchemaFor200ResponseBodyApplicationJson = APIEntitiesAppearanceSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: APIEntitiesAppearance


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: APIEntitiesAppearance


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
}
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _modify_appearance_mapped_args(
        self,
        title: typing.Optional[str] = None,
        description: typing.Optional[str] = None,
        pwa_name: typing.Optional[str] = None,
        pwa_short_name: typing.Optional[str] = None,
        pwa_description: typing.Optional[str] = None,
        logo: typing.Optional[typing.IO] = None,
        pwa_icon: typing.Optional[typing.IO] = None,
        header_logo: typing.Optional[typing.IO] = None,
        favicon: typing.Optional[typing.IO] = None,
        new_project_guidelines: typing.Optional[str] = None,
        profile_image_guidelines: typing.Optional[str] = None,
        header_message: typing.Optional[str] = None,
        footer_message: typing.Optional[str] = None,
        message_background_color: typing.Optional[str] = None,
        message_font_color: typing.Optional[str] = None,
        email_header_and_footer_enabled: typing.Optional[bool] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _body = {}
        if title is not None:
            _body["title"] = title
        if description is not None:
            _body["description"] = description
        if pwa_name is not None:
            _body["pwa_name"] = pwa_name
        if pwa_short_name is not None:
            _body["pwa_short_name"] = pwa_short_name
        if pwa_description is not None:
            _body["pwa_description"] = pwa_description
        if logo is not None:
            _body["logo"] = logo
        if pwa_icon is not None:
            _body["pwa_icon"] = pwa_icon
        if header_logo is not None:
            _body["header_logo"] = header_logo
        if favicon is not None:
            _body["favicon"] = favicon
        if new_project_guidelines is not None:
            _body["new_project_guidelines"] = new_project_guidelines
        if profile_image_guidelines is not None:
            _body["profile_image_guidelines"] = profile_image_guidelines
        if header_message is not None:
            _body["header_message"] = header_message
        if footer_message is not None:
            _body["footer_message"] = footer_message
        if message_background_color is not None:
            _body["message_background_color"] = message_background_color
        if message_font_color is not None:
            _body["message_font_color"] = message_font_color
        if email_header_and_footer_enabled is not None:
            _body["email_header_and_footer_enabled"] = email_header_and_footer_enabled
        args.body = _body
        return args

    async def _amodify_appearance_oapg(
        self,
        body: typing.Any = None,
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'multipart/form-data',
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        used_path = path.value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'put'.upper()
        _headers.add('Content-Type', content_type)
    
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/api/v4/application/appearance',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        if body is not schemas.unset:
            serialized_data = request_body_application_modify_appearance_request.serialize(body, content_type)
            if 'fields' in serialized_data:
                _fields = serialized_data['fields']
            elif 'body' in serialized_data:
                _body = serialized_data['body']
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _modify_appearance_oapg(
        self,
        body: typing.Any = None,
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'multipart/form-data',
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        used_path = path.value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'put'.upper()
        _headers.add('Content-Type', content_type)
    
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/api/v4/application/appearance',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        if body is not schemas.unset:
            serialized_data = request_body_application_modify_appearance_request.serialize(body, content_type)
            if 'fields' in serialized_data:
                _fields = serialized_data['fields']
            elif 'body' in serialized_data:
                _body = serialized_data['body']
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class ModifyAppearanceRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def amodify_appearance(
        self,
        title: typing.Optional[str] = None,
        description: typing.Optional[str] = None,
        pwa_name: typing.Optional[str] = None,
        pwa_short_name: typing.Optional[str] = None,
        pwa_description: typing.Optional[str] = None,
        logo: typing.Optional[typing.IO] = None,
        pwa_icon: typing.Optional[typing.IO] = None,
        header_logo: typing.Optional[typing.IO] = None,
        favicon: typing.Optional[typing.IO] = None,
        new_project_guidelines: typing.Optional[str] = None,
        profile_image_guidelines: typing.Optional[str] = None,
        header_message: typing.Optional[str] = None,
        footer_message: typing.Optional[str] = None,
        message_background_color: typing.Optional[str] = None,
        message_font_color: typing.Optional[str] = None,
        email_header_and_footer_enabled: typing.Optional[bool] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._modify_appearance_mapped_args(
            body=body,
            title=title,
            description=description,
            pwa_name=pwa_name,
            pwa_short_name=pwa_short_name,
            pwa_description=pwa_description,
            logo=logo,
            pwa_icon=pwa_icon,
            header_logo=header_logo,
            favicon=favicon,
            new_project_guidelines=new_project_guidelines,
            profile_image_guidelines=profile_image_guidelines,
            header_message=header_message,
            footer_message=footer_message,
            message_background_color=message_background_color,
            message_font_color=message_font_color,
            email_header_and_footer_enabled=email_header_and_footer_enabled,
        )
        return await self._amodify_appearance_oapg(
            body=args.body,
            **kwargs,
        )
    
    def modify_appearance(
        self,
        title: typing.Optional[str] = None,
        description: typing.Optional[str] = None,
        pwa_name: typing.Optional[str] = None,
        pwa_short_name: typing.Optional[str] = None,
        pwa_description: typing.Optional[str] = None,
        logo: typing.Optional[typing.IO] = None,
        pwa_icon: typing.Optional[typing.IO] = None,
        header_logo: typing.Optional[typing.IO] = None,
        favicon: typing.Optional[typing.IO] = None,
        new_project_guidelines: typing.Optional[str] = None,
        profile_image_guidelines: typing.Optional[str] = None,
        header_message: typing.Optional[str] = None,
        footer_message: typing.Optional[str] = None,
        message_background_color: typing.Optional[str] = None,
        message_font_color: typing.Optional[str] = None,
        email_header_and_footer_enabled: typing.Optional[bool] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._modify_appearance_mapped_args(
            body=body,
            title=title,
            description=description,
            pwa_name=pwa_name,
            pwa_short_name=pwa_short_name,
            pwa_description=pwa_description,
            logo=logo,
            pwa_icon=pwa_icon,
            header_logo=header_logo,
            favicon=favicon,
            new_project_guidelines=new_project_guidelines,
            profile_image_guidelines=profile_image_guidelines,
            header_message=header_message,
            footer_message=footer_message,
            message_background_color=message_background_color,
            message_font_color=message_font_color,
            email_header_and_footer_enabled=email_header_and_footer_enabled,
        )
        return self._modify_appearance_oapg(
            body=args.body,
        )

class ModifyAppearance(BaseApi):

    async def amodify_appearance(
        self,
        title: typing.Optional[str] = None,
        description: typing.Optional[str] = None,
        pwa_name: typing.Optional[str] = None,
        pwa_short_name: typing.Optional[str] = None,
        pwa_description: typing.Optional[str] = None,
        logo: typing.Optional[typing.IO] = None,
        pwa_icon: typing.Optional[typing.IO] = None,
        header_logo: typing.Optional[typing.IO] = None,
        favicon: typing.Optional[typing.IO] = None,
        new_project_guidelines: typing.Optional[str] = None,
        profile_image_guidelines: typing.Optional[str] = None,
        header_message: typing.Optional[str] = None,
        footer_message: typing.Optional[str] = None,
        message_background_color: typing.Optional[str] = None,
        message_font_color: typing.Optional[str] = None,
        email_header_and_footer_enabled: typing.Optional[bool] = None,
        validate: bool = False,
        **kwargs,
    ) -> APIEntitiesAppearancePydantic:
        raw_response = await self.raw.amodify_appearance(
            body=body,
            title=title,
            description=description,
            pwa_name=pwa_name,
            pwa_short_name=pwa_short_name,
            pwa_description=pwa_description,
            logo=logo,
            pwa_icon=pwa_icon,
            header_logo=header_logo,
            favicon=favicon,
            new_project_guidelines=new_project_guidelines,
            profile_image_guidelines=profile_image_guidelines,
            header_message=header_message,
            footer_message=footer_message,
            message_background_color=message_background_color,
            message_font_color=message_font_color,
            email_header_and_footer_enabled=email_header_and_footer_enabled,
            **kwargs,
        )
        if validate:
            return APIEntitiesAppearancePydantic(**raw_response.body)
        return api_client.construct_model_instance(APIEntitiesAppearancePydantic, raw_response.body)
    
    
    def modify_appearance(
        self,
        title: typing.Optional[str] = None,
        description: typing.Optional[str] = None,
        pwa_name: typing.Optional[str] = None,
        pwa_short_name: typing.Optional[str] = None,
        pwa_description: typing.Optional[str] = None,
        logo: typing.Optional[typing.IO] = None,
        pwa_icon: typing.Optional[typing.IO] = None,
        header_logo: typing.Optional[typing.IO] = None,
        favicon: typing.Optional[typing.IO] = None,
        new_project_guidelines: typing.Optional[str] = None,
        profile_image_guidelines: typing.Optional[str] = None,
        header_message: typing.Optional[str] = None,
        footer_message: typing.Optional[str] = None,
        message_background_color: typing.Optional[str] = None,
        message_font_color: typing.Optional[str] = None,
        email_header_and_footer_enabled: typing.Optional[bool] = None,
        validate: bool = False,
    ) -> APIEntitiesAppearancePydantic:
        raw_response = self.raw.modify_appearance(
            body=body,
            title=title,
            description=description,
            pwa_name=pwa_name,
            pwa_short_name=pwa_short_name,
            pwa_description=pwa_description,
            logo=logo,
            pwa_icon=pwa_icon,
            header_logo=header_logo,
            favicon=favicon,
            new_project_guidelines=new_project_guidelines,
            profile_image_guidelines=profile_image_guidelines,
            header_message=header_message,
            footer_message=footer_message,
            message_background_color=message_background_color,
            message_font_color=message_font_color,
            email_header_and_footer_enabled=email_header_and_footer_enabled,
        )
        if validate:
            return APIEntitiesAppearancePydantic(**raw_response.body)
        return api_client.construct_model_instance(APIEntitiesAppearancePydantic, raw_response.body)


class ApiForput(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def aput(
        self,
        title: typing.Optional[str] = None,
        description: typing.Optional[str] = None,
        pwa_name: typing.Optional[str] = None,
        pwa_short_name: typing.Optional[str] = None,
        pwa_description: typing.Optional[str] = None,
        logo: typing.Optional[typing.IO] = None,
        pwa_icon: typing.Optional[typing.IO] = None,
        header_logo: typing.Optional[typing.IO] = None,
        favicon: typing.Optional[typing.IO] = None,
        new_project_guidelines: typing.Optional[str] = None,
        profile_image_guidelines: typing.Optional[str] = None,
        header_message: typing.Optional[str] = None,
        footer_message: typing.Optional[str] = None,
        message_background_color: typing.Optional[str] = None,
        message_font_color: typing.Optional[str] = None,
        email_header_and_footer_enabled: typing.Optional[bool] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._modify_appearance_mapped_args(
            body=body,
            title=title,
            description=description,
            pwa_name=pwa_name,
            pwa_short_name=pwa_short_name,
            pwa_description=pwa_description,
            logo=logo,
            pwa_icon=pwa_icon,
            header_logo=header_logo,
            favicon=favicon,
            new_project_guidelines=new_project_guidelines,
            profile_image_guidelines=profile_image_guidelines,
            header_message=header_message,
            footer_message=footer_message,
            message_background_color=message_background_color,
            message_font_color=message_font_color,
            email_header_and_footer_enabled=email_header_and_footer_enabled,
        )
        return await self._amodify_appearance_oapg(
            body=args.body,
            **kwargs,
        )
    
    def put(
        self,
        title: typing.Optional[str] = None,
        description: typing.Optional[str] = None,
        pwa_name: typing.Optional[str] = None,
        pwa_short_name: typing.Optional[str] = None,
        pwa_description: typing.Optional[str] = None,
        logo: typing.Optional[typing.IO] = None,
        pwa_icon: typing.Optional[typing.IO] = None,
        header_logo: typing.Optional[typing.IO] = None,
        favicon: typing.Optional[typing.IO] = None,
        new_project_guidelines: typing.Optional[str] = None,
        profile_image_guidelines: typing.Optional[str] = None,
        header_message: typing.Optional[str] = None,
        footer_message: typing.Optional[str] = None,
        message_background_color: typing.Optional[str] = None,
        message_font_color: typing.Optional[str] = None,
        email_header_and_footer_enabled: typing.Optional[bool] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._modify_appearance_mapped_args(
            body=body,
            title=title,
            description=description,
            pwa_name=pwa_name,
            pwa_short_name=pwa_short_name,
            pwa_description=pwa_description,
            logo=logo,
            pwa_icon=pwa_icon,
            header_logo=header_logo,
            favicon=favicon,
            new_project_guidelines=new_project_guidelines,
            profile_image_guidelines=profile_image_guidelines,
            header_message=header_message,
            footer_message=footer_message,
            message_background_color=message_background_color,
            message_font_color=message_font_color,
            email_header_and_footer_enabled=email_header_and_footer_enabled,
        )
        return self._modify_appearance_oapg(
            body=args.body,
        )

